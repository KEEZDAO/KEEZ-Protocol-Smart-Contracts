{
	"compiler": {
		"version": "0.8.6+commit.11564f7e"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "daoAddress",
						"type": "address"
					}
				],
				"name": "_getAddressDaoPermission",
				"outputs": [
					{
						"internalType": "bytes",
						"name": "addressPermssions",
						"type": "bytes"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "_getDaoAddressByIndex",
				"outputs": [
					{
						"internalType": "bytes",
						"name": "daoAddress",
						"type": "bytes"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "_getDaoAddressesArrayLength",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "length",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "_getDaoDescription",
				"outputs": [
					{
						"internalType": "string",
						"name": "description",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "_getDaoName",
				"outputs": [
					{
						"internalType": "string",
						"name": "name",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "_getDaoParticipationRate",
				"outputs": [
					{
						"internalType": "uint8",
						"name": "participationRate",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "_getDaoQuorum",
				"outputs": [
					{
						"internalType": "uint8",
						"name": "quorum",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "_getDaoVotingDelay",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "votingDelay",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "_getDaoVotingPeriod",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "votingPeriod",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "delegator",
						"type": "address"
					}
				],
				"name": "_getDelegateeOfTheDelegator",
				"outputs": [
					{
						"internalType": "address",
						"name": "delegatee",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "delegatee",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "_getDelegatorByIndex",
				"outputs": [
					{
						"internalType": "address",
						"name": "delegator",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "delegatee",
						"type": "address"
					}
				],
				"name": "_getDelegatorsArrayLength",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "length",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint8",
						"name": "index",
						"type": "uint8"
					}
				],
				"name": "_getPermissionsByIndex",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "permission",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "universalProfileAddress",
						"type": "address"
					},
					{
						"internalType": "uint8",
						"name": "index",
						"type": "uint8"
					}
				],
				"name": "addPermission",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_title",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "_description",
						"type": "string"
					},
					{
						"internalType": "address[]",
						"name": "_targets",
						"type": "address[]"
					},
					{
						"internalType": "bytes[]",
						"name": "_datas",
						"type": "bytes[]"
					}
				],
				"name": "createProposal",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "proposalSignature",
						"type": "bytes32"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "delegator",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "delegatee",
						"type": "address"
					}
				],
				"name": "delegate",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "proposalSignature",
						"type": "bytes32"
					}
				],
				"name": "endProposal",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "proposalSignature",
						"type": "bytes32"
					}
				],
				"name": "putProposalToVote",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "universalProfileAddress",
						"type": "address"
					},
					{
						"internalType": "uint8",
						"name": "index",
						"type": "uint8"
					}
				],
				"name": "removePermission",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "proposalSignature",
						"type": "bytes32"
					},
					{
						"internalType": "uint8",
						"name": "voteIndex",
						"type": "uint8"
					}
				],
				"name": "vote",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"author": "B00ste",
			"custom:version": "0.8",
			"kind": "dev",
			"methods": {
				"_getAddressDaoPermission(address)": {
					"params": {
						"daoAddress": "The address of a DAO participant."
					}
				},
				"_getDaoAddressByIndex(uint256)": {
					"params": {
						"index": "The index of the an address."
					}
				},
				"_getDelegateeOfTheDelegator(address)": {
					"params": {
						"delegator": "Address of the delegator.."
					}
				},
				"_getDelegatorByIndex(address,uint256)": {
					"params": {
						"delegatee": "Address of the delegatee.",
						"index": "A number of the array."
					}
				},
				"_getDelegatorsArrayLength(address)": {
					"params": {
						"delegatee": "Address of the delegatee."
					}
				},
				"addPermission(address,uint8)": {
					"params": {
						"index": "A number 0 <= `index` <= 4.",
						"universalProfileAddress": "The address of a Universal Profile."
					}
				},
				"constructor": {
					"params": {
						"description": "Description of the DAO.",
						"name": "Name of the DAO.",
						"participationRate": "The percentage of pro and against votes compared to abstain votes needed for a proposal to pass.",
						"quorum": "The percentage of pro votes from the sum of pro and against votes needed for a proposal to pass.",
						"votingDelay": "Time required to pass before a proposal goes to the voting phase.",
						"votingPeriod": "Time allowed for voting on a proposal."
					}
				},
				"createProposal(string,string,address[],bytes[])": {
					"params": {
						"_datas": "The calldata that will be executed if the proposall passes.",
						"_description": "Description of the proposal.",
						"_targets": "The addresses of the smart contracts that might have calldata executed.",
						"_title": "Title of the proposal."
					}
				},
				"endProposal(bytes32)": {
					"params": {
						"proposalSignature": "The abi.encode bytes32 signature of a proposal."
					}
				},
				"putProposalToVote(bytes32)": {
					"params": {
						"proposalSignature": "The abi.encode bytes32 signature of a proposal."
					}
				},
				"removePermission(address,uint8)": {
					"params": {
						"index": "A number 0 <= `index` <= 4.",
						"universalProfileAddress": "The address of a Universal Profile."
					}
				},
				"vote(bytes32,uint8)": {
					"params": {
						"proposalSignature": "The abi.encode bytes32 signature of a proposal.",
						"voteIndex": "a number 0 <= `voteIndex` <= 2. Index 0 are the against votes.  Index 1 are the pro votes.  Index 2 are the abstain votes. "
					}
				}
			},
			"title": "DaoAccount",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"_getAddressDaoPermission(address)": {
					"notice": "Get addresses DAO permmissions BitArray."
				},
				"_getDaoAddressByIndex(uint256)": {
					"notice": "Get an address of a DAO perticipant by index."
				},
				"_getDaoAddressesArrayLength()": {
					"notice": "Get the length of the array of the addresses that are participants of the DAO."
				},
				"_getDaoDescription()": {
					"notice": "Get the description of the DAO."
				},
				"_getDaoName()": {
					"notice": "Get the name of the DAO."
				},
				"_getDaoParticipationRate()": {
					"notice": "Get the participation rate of the DAO."
				},
				"_getDaoQuorum()": {
					"notice": "Get the quorum of the DAO."
				},
				"_getDaoVotingDelay()": {
					"notice": "Get the voting delay of the DAO."
				},
				"_getDaoVotingPeriod()": {
					"notice": "Get the voting period of the DAO."
				},
				"_getDelegateeOfTheDelegator(address)": {
					"notice": "Get the delgatee of the delegator."
				},
				"_getDelegatorByIndex(address,uint256)": {
					"notice": "Get the delegator of the delagtee by index."
				},
				"_getDelegatorsArrayLength(address)": {
					"notice": "Get the length of the array of addresses that delegated the votes to a delegatee."
				},
				"_getPermissionsByIndex(uint8)": {
					"notice": "Get the the bytes32 permission from the permissions array."
				},
				"addPermission(address,uint8)": {
					"notice": "Add permission to an address by index. Index 0 sets the VOTE permission. Index 1 sets the PROPOSE permission. Index 2 sets the SEND_DELEGATE permission. Index 3 sets the RECIEVE_DELEGATE permission. Index 4 sets the MASTER permission."
				},
				"constructor": {
					"notice": "Initialization of the Universal Profile Account as a DAO Account; This smart contract will be given all controller permissions. Here is where all the tools needed for a functioning DAO are initialized."
				},
				"createProposal(string,string,address[],bytes[])": {
					"notice": "Create a proposal. The proposal signature is encoded to a bytes32 variable using abi.encode(_title, _description, _targets, _datas)."
				},
				"delegate(address,address)": {
					"notice": "Delegate your vote to another participant of the DAO"
				},
				"endProposal(bytes32)": {
					"notice": "End proposal and execute the calldata. Encode the proposal info, timestamps and results and save them to the Universal Profile of the DAO."
				},
				"putProposalToVote(bytes32)": {
					"notice": "Move the proposal to the voting phase."
				},
				"removePermission(address,uint8)": {
					"notice": "Remove the permission of an Unversal Profile by index. Index 0 unsets the VOTE permission. Index 1 unsets the PROPOSE permission. Index 2 unsets the SEND_DELEGATE permission. Index 3 unsets the RECIEVE_DELEGATE permission. Index 4 unsets the MASTER permission."
				},
				"vote(bytes32,uint8)": {
					"notice": "Vote on a proposal."
				}
			},
			"notice": "This smart contract is responsible for connecting all the necessary tools for a DAO based on Universal Profiles (LSP0ERC725Account)",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/DaoAccount.sol": "DaoAccount"
		},
		"evmVersion": "berlin",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@erc725/smart-contracts/contracts/ERC725XCore.sol": {
			"keccak256": "0x0dea1727273f66b0e854c346d49bacc86ad39735484a5ac07a25b280f4cdb792",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://a4170d02a2b3ec5781b17a0dcfe9f8fc75113c7923e20ca80e793bc473ed3c00",
				"dweb:/ipfs/QmW2Q9UVxZwiEkx67zqGoPC8uKVPz6apZMt7J2ALsLTM78"
			]
		},
		"@erc725/smart-contracts/contracts/ERC725YCore.sol": {
			"keccak256": "0x215fc8caf03c1af787a3e46db456bdc8e3a662345d40a34f20e35af220f4e77b",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://fc44c50e8440965cb7fd412be9d17cdfdb6400af8a6e0fa3e9cc9fe55b730a4a",
				"dweb:/ipfs/Qme7jiVkpW6vMjibotZoZatZFsYYg6SnDhWNkikAdUUheQ"
			]
		},
		"@erc725/smart-contracts/contracts/constants.sol": {
			"keccak256": "0xdf3d466e2d6f8d0f2e288ee01edb0cf7de2db9cac3c257b7d6a6284adf4b2480",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://16e4a90c8f2d245621808320ed6aa4ad7fcfd50b36df116e8447e5fc1700d7a9",
				"dweb:/ipfs/QmT4E9cSMuwpiABbdKExNn3Ef9wmjdmv3E9MuwkmkDv6BY"
			]
		},
		"@erc725/smart-contracts/contracts/custom/OwnableUnset.sol": {
			"keccak256": "0x410d0a0c6f9f769b79cf7d34c097c967160f5f9876453b2a1659cbb8082a4961",
			"license": "MIT",
			"urls": [
				"bzz-raw://8e1068d9896dfe4d2d73cd75506f52f572daa3a4f35c0f980fdd91d3faa52ecf",
				"dweb:/ipfs/QmVodeBozCKcU2vdofRtKF5RAi42q3zBNW9SEYrg7SexDP"
			]
		},
		"@erc725/smart-contracts/contracts/interfaces/IERC725X.sol": {
			"keccak256": "0xcb9ac83388fcacceb35734af1164e0819786f4b32b7f3e1e428dba6cd278fc97",
			"license": "CC0-1.0",
			"urls": [
				"bzz-raw://ba6c27bf8723350db158b30a66467589b20033f6585308cf79b15c89101bed76",
				"dweb:/ipfs/QmS4J8bQGTivPqKQqVj27Xh4hxq3VVPbVCWPKjVanEy882"
			]
		},
		"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol": {
			"keccak256": "0x4144879c1923deaac59a07abd5dabb9d8c50b5b4522e3fb9158e0e63a3ce696b",
			"license": "CC0-1.0",
			"urls": [
				"bzz-raw://810f61f5ed8fb2ac8270751188382c0f66b268dcf5e877e2d320b6dc95c44528",
				"dweb:/ipfs/QmR7GYVw79YypsAWg5jfNzNMCE3NJqersoqCkyux3MR8oa"
			]
		},
		"@erc725/smart-contracts/contracts/utils/ErrorHandlerLib.sol": {
			"keccak256": "0xfabe3bd3eefe73e7add948aee9e9daf9604bedaaf8c4d4557674b74a6bbdad37",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://05a1b0ea2b1f5890c820794efd88d977bb5501ab9dee9aa15c1d770d04335561",
				"dweb:/ipfs/QmU7djirv1HmeHwrS16SCqRoTnN83voMA93vu2PwCWELdr"
			]
		},
		"@erc725/smart-contracts/contracts/utils/GasLib.sol": {
			"keccak256": "0xd69f4d06630e47043a59e2173badd2275c6762d9109cc792d5891101686f6c2b",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://55e5b55b404e0897c84c598ab5bcc4621258c13c849c1bd55d3807dd7e25705c",
				"dweb:/ipfs/QmZgAUofnxdxbp2T3dTyULqnp4kzXWWZJ8UBWqqdxi4Ywt"
			]
		},
		"@lukso/lsp-smart-contracts/contracts/Custom/ClaimOwnership.sol": {
			"keccak256": "0x40fdf6dbc82ad3902cd7d356b7bce1451dae8dca06522cfb03405b13b20e9a2f",
			"license": "MIT",
			"urls": [
				"bzz-raw://f0c6ae883813af74633e5a8a7f1d31d9b021037ee14f4f3821be9ec3e569dfac",
				"dweb:/ipfs/Qmbs2zeXQ1s7zvFkCwET1kN6QxNEzfvLcbXcmsympfCQTZ"
			]
		},
		"@lukso/lsp-smart-contracts/contracts/Custom/ERC165Checker.sol": {
			"keccak256": "0x076fb61a330055d96723ad73383629e0ff2e5f903b2ba67e323318ef2e78ec7c",
			"license": "MIT",
			"urls": [
				"bzz-raw://8bf3f35a840ad8f800f149d504082abdd08d656954d9f9066f9ca4867f9428c4",
				"dweb:/ipfs/QmNSbTbn7LceU2s6QuBKoV6vA4ujVX5nvNmwR7XqT2wE3j"
			]
		},
		"@lukso/lsp-smart-contracts/contracts/Custom/IClaimOwnership.sol": {
			"keccak256": "0xd5836bb3cf4a7967df66c2bb67e4081c6a2e397918d3fdd4da462ff4e67c54c1",
			"license": "MIT",
			"urls": [
				"bzz-raw://6a5209adb63bcba94181a2604559707987adefa3613e3ae8ef4520b9f2fa2308",
				"dweb:/ipfs/QmSkaFoUvPazeeeJfzSLK7mjFRjFobktEWqbQQncGV5dng"
			]
		},
		"@lukso/lsp-smart-contracts/contracts/LSP0ERC725Account/LSP0Constants.sol": {
			"keccak256": "0x538700fa454e889567a0c8c14c11814bf471eafd3a84b7bbc2a323dc9e4f4455",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://9b8ffc61d10db950c710ffafd583661fe09a4e04a9a9b02a77252ca4538fb42e",
				"dweb:/ipfs/QmetniuqdrG6ERrSGj6t8RwuurWEtqKGGyKNAkozkbTAgg"
			]
		},
		"@lukso/lsp-smart-contracts/contracts/LSP0ERC725Account/LSP0ERC725Account.sol": {
			"keccak256": "0xcd2d9e61856d65990aa784ff8298e84055f3037929c6b2c7bccb4f96f321bef1",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://05f9136ef2b4a659f65b7bf57b5fc4674476592ca21619533b13cf75e224b66a",
				"dweb:/ipfs/QmRKfzspr68P8XTwf1ghkM1EycVmugrV2fkvMnkbHHGC1Y"
			]
		},
		"@lukso/lsp-smart-contracts/contracts/LSP0ERC725Account/LSP0ERC725AccountCore.sol": {
			"keccak256": "0x1e43b938d8601383c0dd6ec6a3b994324697afefe76c1c33a05a990cdea8a555",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://a5f33e59978d6cf419a3384809737c9c45d390b268f8d163c83dbf407b4ad6d7",
				"dweb:/ipfs/Qme4SBtcrpDj8XSikJUpRSa8riiEMrQxQKQEii3qihwp1i"
			]
		},
		"@lukso/lsp-smart-contracts/contracts/LSP1UniversalReceiver/ILSP1UniversalReceiver.sol": {
			"keccak256": "0xbca7d0f76e439ee3302096f8ecaf8a506434a83c86639c95efd79e6b89d364ae",
			"license": "CC0-1.0",
			"urls": [
				"bzz-raw://c4e3931e406a2e0c69bd5a7c5a677541a36dcdda01682e46bf7180bc814495a7",
				"dweb:/ipfs/QmWRZZ2XerqFttSpcCv27Fk4bTzHAVaKHFxCLYGFmYj1uK"
			]
		},
		"@lukso/lsp-smart-contracts/contracts/LSP1UniversalReceiver/ILSP1UniversalReceiverDelegate.sol": {
			"keccak256": "0x91cfa8fec33a3d7f4141c1188fd3d2bd167db9e8420e9b9ed07c3e1f7b8a239b",
			"license": "CC0-1.0",
			"urls": [
				"bzz-raw://fd707b91f940a35052503056548ec30ab141cc16d73bd8355c6cb608f203d991",
				"dweb:/ipfs/QmXPUNVJLYMBYW4SzMzpG7MoLzAYupQK9R5yqQQ9gtzC9B"
			]
		},
		"@lukso/lsp-smart-contracts/contracts/LSP1UniversalReceiver/LSP1Constants.sol": {
			"keccak256": "0x37255dac370701b20dc046c41024686ccf5a88eb1e68415c30167015f6f80f17",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://fdfe8b6cd1deddcf3d3110f54b6a8bb9a73412c4f8cc40369027e82fe55322e1",
				"dweb:/ipfs/QmdwssJrfuT3nrub7M5fr8ZwT8WeAytbx8z2K9rwgjVnv4"
			]
		},
		"@openzeppelin/contracts/interfaces/IERC1271.sol": {
			"keccak256": "0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544",
			"license": "MIT",
			"urls": [
				"bzz-raw://c45b821ef9e882e57c256697a152e108f0f2ad6997609af8904cae99c9bd422e",
				"dweb:/ipfs/QmRKCJW6jjzR5UYZcLpGnhEJ75UVbH6EHkEa49sWx2SKng"
			]
		},
		"@openzeppelin/contracts/utils/Create2.sol": {
			"keccak256": "0x62237e1773cbf99739b7019f3772a2ff5360d56edb69751b513237f5fcd78571",
			"license": "MIT",
			"urls": [
				"bzz-raw://f39caaa49151a341d9c258a5b7308856d11c8cf349062314eea1e2251f0d1918",
				"dweb:/ipfs/QmcJqGdrHEdiBfB5zuA3ykY1wc2LDNtz8Y88HPEscJe71G"
			]
		},
		"@openzeppelin/contracts/utils/Strings.sol": {
			"keccak256": "0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3",
			"license": "MIT",
			"urls": [
				"bzz-raw://6f2cf1c531122bc7ca96b8c8db6a60deae60441e5223065e792553d4849b5638",
				"dweb:/ipfs/QmPBdJmBBABMDCfyDjCbdxgiqRavgiSL88SYPGibgbPas9"
			]
		},
		"@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
			"keccak256": "0x84ac2d2f343df1e683da7a12bbcf70db542a7a7a0cea90a5d70fcb5e5d035481",
			"license": "MIT",
			"urls": [
				"bzz-raw://73ae8e0c6f975052973265113d762629002ce33987b1933c2a378667e2816f2f",
				"dweb:/ipfs/QmQAootkVfoe4PLaYbT4Xob2dJRm3bZfbCffEHRbCYXNPF"
			]
		},
		"@openzeppelin/contracts/utils/introspection/ERC165.sol": {
			"keccak256": "0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b",
			"license": "MIT",
			"urls": [
				"bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d",
				"dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43"
			]
		},
		"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
			"keccak256": "0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1",
			"license": "MIT",
			"urls": [
				"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f",
				"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy"
			]
		},
		"contracts/DaoAccount.sol": {
			"keccak256": "0xb9503fbce504536c4f50e561496df4fcf493529898d5d9578f20aa958dd8e342",
			"license": "CC0-1.0",
			"urls": [
				"bzz-raw://67770a77a0b25214eccfbe107991cbc37952352c73249b1437ffc4d70afdb41a",
				"dweb:/ipfs/QmXwziR6uoKkKgAjsDyqYcVhbY75FUXNxtzKm5fcuc4cHG"
			]
		},
		"contracts/DaoAccountMetadata.sol": {
			"keccak256": "0x6e45920787e7b241c47acdb3dfdc69cd83dcfc0d43efcb7bb7eac0fcc869e454",
			"license": "CC0-1.0",
			"urls": [
				"bzz-raw://97aacd7b69451f58292efefd4da46b1ea94c800c6419b57bbe13e615194049c8",
				"dweb:/ipfs/QmVNvoZHyorviKQvQP5ZwvmP3b6uSux7VCmByqSbbCj61a"
			]
		},
		"contracts/DaoDelegates.sol": {
			"keccak256": "0x970902573648b33d9619b60d0c6bc0e130c3313a839a9ad6cfdb3b21e82a312f",
			"license": "CC0-1.0",
			"urls": [
				"bzz-raw://13e4c7b636017ef621290611c234600da1a9740a55bd59e91fac8c68dd329b1c",
				"dweb:/ipfs/QmPGQ4pigVvianj6oQvhnUPBxH9SxkvwY3uw5zy3oXtDJa"
			]
		},
		"contracts/DaoPermissions.sol": {
			"keccak256": "0x4bb8997ae7c8dcbe9e52812e18d132c1d04f68125ba2f7acc5d6090541bf9886",
			"license": "CC0-1.0",
			"urls": [
				"bzz-raw://eb388af78738b7724aaf3f318f38b2d9f9a0195b63b5f94e2123de1a6f67559d",
				"dweb:/ipfs/Qmaq9VT5FD4ByoKWyJw7Mkp9RCbAuawNkEzexyyWpMSdex"
			]
		},
		"contracts/DaoProposals.sol": {
			"keccak256": "0x20fc007482103f8e8de3f8f67ea48a1bd03aa5212c467393398ca309dbfe457b",
			"license": "CC0-1.0",
			"urls": [
				"bzz-raw://fc637375560fc1044997af9a69852392f4eacedc9af00e6d620bbb17ed75f201",
				"dweb:/ipfs/QmRv89ZyXjDHnN1NSezNzo3UpGcN7ZbJoZfvpDWTFQBbmG"
			]
		},
		"contracts/DaoUtils.sol": {
			"keccak256": "0x0b45467be2f20c08fc68a01330d3413c397fe6edd402620a2f1c94a3829a4e83",
			"license": "CC0-1.0",
			"urls": [
				"bzz-raw://608686ad77d8b78b96f49865eef3066d8916239cf38768e1cc03ebc636d87cd5",
				"dweb:/ipfs/QmVjYhwDqWun5jMx1Y1RHV743d7D8vKGCyUDFXJK4yabTZ"
			]
		},
		"contracts/Interfaces/DaoAccountMetadataInterface.sol": {
			"keccak256": "0x7624784cf1914ba51ce66839557499ed8a604afa2c6a3b9789d752d35e687a24",
			"license": "CC0-1.0",
			"urls": [
				"bzz-raw://407bef45a030988df6b404557939b367cf3f1b00a3b12c85957334a637a074b7",
				"dweb:/ipfs/QmUumP1cbdXvHwHcPwetkTVRRvj4br39xFpTFQ8GdUr4Nm"
			]
		},
		"contracts/Interfaces/DaoDelegatesInterface.sol": {
			"keccak256": "0x1aa740aa7033ae933fe78a78adfc7798cee8d1fef5ec2dfebd4c6288fa68f9c5",
			"license": "CC0-1.0",
			"urls": [
				"bzz-raw://3624e6be6d3c50659c6629fd24842bb48f5c052d3fd3ffc0767a5f7635215106",
				"dweb:/ipfs/QmPpTkZ2QqnZohATnZieRd1ppsBZ4sby6Tr8NuRphNzMKW"
			]
		},
		"contracts/Interfaces/DaoPermissionsInterface.sol": {
			"keccak256": "0xbad2e0cb0ab600a0852a0389b5995b7bc7ac6e9c4cba5df9ec1b62c23471e486",
			"license": "CC0-1.0",
			"urls": [
				"bzz-raw://bb6a50ad8f7a61243aba2126263dcbccb5527ec98b66683b30dc11c080ddcaf2",
				"dweb:/ipfs/Qmbs6cFX6qFemB2fRC4G3FeMLB4sqZzEQiU23jam4QQB1M"
			]
		},
		"solidity-bytes-utils/contracts/BytesLib.sol": {
			"keccak256": "0xf75784dfc94ea43668eb195d5690a1dde1b6eda62017e73a3899721583821d29",
			"license": "Unlicense",
			"urls": [
				"bzz-raw://ca16cef8b94f3ac75d376489a668618f6c4595a906b939d674a883f4bf426014",
				"dweb:/ipfs/QmceGU7qhyFLSejaj6i4dEtMzXDCSF3aYDtW1UeKjXQaRn"
			]
		}
	},
	"version": 1
}
{
  "contractName": "ErrorHandlerLib",
  "abi": [],
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"When calling other contracts via low-level calls like `contract.call{ ... }(data)`, errors need to be handled manually. This library will correctly handle the built-in Error(string) and Panic(uint256) as well as custom errors introduced in Solidity 0.8.4.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Error Handler\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@erc725/smart-contracts/contracts/utils/ErrorHandlerLib.sol\":\"ErrorHandlerLib\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@erc725/smart-contracts/contracts/utils/ErrorHandlerLib.sol\":{\"keccak256\":\"0xfabe3bd3eefe73e7add948aee9e9daf9604bedaaf8c4d4557674b74a6bbdad37\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://05a1b0ea2b1f5890c820794efd88d977bb5501ab9dee9aa15c1d770d04335561\",\"dweb:/ipfs/QmU7djirv1HmeHwrS16SCqRoTnN83voMA93vu2PwCWELdr\"]}},\"version\":1}",
  "bytecode": "0x60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200fba6bd97890a4ff5d1aa78f40083906407b2e0116b27d9d7395000530f0484d64736f6c634300080f0033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200fba6bd97890a4ff5d1aa78f40083906407b2e0116b27d9d7395000530f0484d64736f6c634300080f0033",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "366:680:7:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
  "deployedSourceMap": "366:680:7:-:0;;;;;;;;",
  "source": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\n/**\n * @title Error Handler\n * @dev When calling other contracts via low-level calls like `contract.call{ ... }(data)`, errors\n * need to be handled manually. This library will correctly handle the built-in Error(string) and\n * Panic(uint256) as well as custom errors introduced in Solidity 0.8.4.\n */\nlibrary ErrorHandlerLib {\n    /**\n     * @dev Will revert with the provided error payload.\n     */\n    function revertWithParsedError(bytes memory error)\n        internal\n        pure\n        returns (string memory)\n    {\n        if (error.length > 0) {\n            // the call reverted with a error string or a custom error\n            // solhint-disable no-inline-assembly\n            assembly {\n                let error_size := mload(error)\n                revert(add(32, error), error_size)\n            }\n        } else {\n            // there was no error payload, revert with empty payload\n            // solhint-disable reason-string\n            revert();\n        }\n    }\n}\n",
  "sourcePath": "@erc725/smart-contracts/contracts/utils/ErrorHandlerLib.sol",
  "ast": {
    "absolutePath": "@erc725/smart-contracts/contracts/utils/ErrorHandlerLib.sol",
    "exportedSymbols": {
      "ErrorHandlerLib": [
        919
      ]
    },
    "id": 920,
    "license": "Apache-2.0",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 897,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "39:23:7"
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "ErrorHandlerLib",
        "contractDependencies": [],
        "contractKind": "library",
        "documentation": {
          "id": 898,
          "nodeType": "StructuredDocumentation",
          "src": "64:301:7",
          "text": " @title Error Handler\n @dev When calling other contracts via low-level calls like `contract.call{ ... }(data)`, errors\n need to be handled manually. This library will correctly handle the built-in Error(string) and\n Panic(uint256) as well as custom errors introduced in Solidity 0.8.4."
        },
        "fullyImplemented": true,
        "id": 919,
        "linearizedBaseContracts": [
          919
        ],
        "name": "ErrorHandlerLib",
        "nameLocation": "374:15:7",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 917,
              "nodeType": "Block",
              "src": "586:458:7",
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 909,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 906,
                        "name": "error",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 901,
                        "src": "600:5:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      },
                      "id": 907,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "600:12:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 908,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "615:1:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "600:16:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "id": 915,
                    "nodeType": "Block",
                    "src": "891:147:7",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 912,
                            "name": "revert",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4294967277,
                              4294967277
                            ],
                            "referencedDeclaration": 4294967277,
                            "src": "1019:6:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_revert_pure$__$returns$__$",
                              "typeString": "function () pure"
                            }
                          },
                          "id": 913,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1019:8:7",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 914,
                        "nodeType": "ExpressionStatement",
                        "src": "1019:8:7"
                      }
                    ]
                  },
                  "id": 916,
                  "nodeType": "IfStatement",
                  "src": "596:442:7",
                  "trueBody": {
                    "id": 911,
                    "nodeType": "Block",
                    "src": "618:267:7",
                    "statements": [
                      {
                        "AST": {
                          "nodeType": "YulBlock",
                          "src": "762:113:7",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "780:30:7",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "error",
                                    "nodeType": "YulIdentifier",
                                    "src": "804:5:7"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "798:5:7"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "798:12:7"
                              },
                              "variables": [
                                {
                                  "name": "error_size",
                                  "nodeType": "YulTypedName",
                                  "src": "784:10:7",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "838:2:7",
                                        "type": "",
                                        "value": "32"
                                      },
                                      {
                                        "name": "error",
                                        "nodeType": "YulIdentifier",
                                        "src": "842:5:7"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "834:3:7"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "834:14:7"
                                  },
                                  {
                                    "name": "error_size",
                                    "nodeType": "YulIdentifier",
                                    "src": "850:10:7"
                                  }
                                ],
                                "functionName": {
                                  "name": "revert",
                                  "nodeType": "YulIdentifier",
                                  "src": "827:6:7"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "827:34:7"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "827:34:7"
                            }
                          ]
                        },
                        "evmVersion": "london",
                        "externalReferences": [
                          {
                            "declaration": 901,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "804:5:7",
                            "valueSize": 1
                          },
                          {
                            "declaration": 901,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "842:5:7",
                            "valueSize": 1
                          }
                        ],
                        "id": 910,
                        "nodeType": "InlineAssembly",
                        "src": "753:122:7"
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": {
              "id": 899,
              "nodeType": "StructuredDocumentation",
              "src": "396:68:7",
              "text": " @dev Will revert with the provided error payload."
            },
            "id": 918,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "revertWithParsedError",
            "nameLocation": "478:21:7",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 902,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 901,
                  "mutability": "mutable",
                  "name": "error",
                  "nameLocation": "513:5:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 918,
                  "src": "500:18:7",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 900,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "500:5:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "499:20:7"
            },
            "returnParameters": {
              "id": 905,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 904,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 918,
                  "src": "567:13:7",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 903,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "567:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "566:15:7"
            },
            "scope": 919,
            "src": "469:575:7",
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "internal"
          }
        ],
        "scope": 920,
        "src": "366:680:7",
        "usedErrors": []
      }
    ],
    "src": "39:1008:7"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.15+commit.e14f2714.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.8",
  "updatedAt": "2022-07-21T08:10:14.589Z",
  "devdoc": {
    "details": "When calling other contracts via low-level calls like `contract.call{ ... }(data)`, errors need to be handled manually. This library will correctly handle the built-in Error(string) and Panic(uint256) as well as custom errors introduced in Solidity 0.8.4.",
    "kind": "dev",
    "methods": {},
    "title": "Error Handler",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}
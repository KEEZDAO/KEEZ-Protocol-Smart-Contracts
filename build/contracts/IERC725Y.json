{
  "contractName": "IERC725Y",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "dataKey",
          "type": "bytes32"
        }
      ],
      "name": "DataChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "dataKeys",
          "type": "bytes32[]"
        }
      ],
      "name": "getData",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "dataValues",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "dataKey",
          "type": "bytes32"
        }
      ],
      "name": "getData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "dataValue",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "dataKeys",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes[]",
          "name": "dataValues",
          "type": "bytes[]"
        }
      ],
      "name": "setData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "dataKey",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "dataValue",
          "type": "bytes"
        }
      ],
      "name": "setData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"}],\"name\":\"DataChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"}],\"name\":\"getData\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"}],\"name\":\"getData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"name\":\"setData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"setData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage\",\"events\":{\"DataChanged(bytes32)\":{\"params\":{\"dataKey\":\"The key which value is set\"}}},\"kind\":\"dev\",\"methods\":{\"getData(bytes32)\":{\"params\":{\"dataKey\":\"The key which value to retrieve\"},\"returns\":{\"dataValue\":\"The data stored at the key\"}},\"getData(bytes32[])\":{\"params\":{\"dataKeys\":\"The array of keys which values to retrieve\"},\"returns\":{\"dataValues\":\"The array of data stored at multiple keys\"}},\"setData(bytes32,bytes)\":{\"params\":{\"dataKey\":\"The key which value to retrieve\",\"dataValue\":\"The value to set SHOULD only be callable by the owner of the contract set via ERC173 Emits a {DataChanged} event.\"}},\"setData(bytes32[],bytes[])\":{\"details\":\"Sets array of data at multiple given `dataKeys` SHOULD only be callable by the owner of the contract set via ERC173 Emits a {DataChanged} event.\",\"params\":{\"dataKeys\":\"The array of keys which values to set\",\"dataValues\":\"The array of values to set\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"title\":\"The interface for ERC725Y General data key/value store\",\"version\":1},\"userdoc\":{\"events\":{\"DataChanged(bytes32)\":{\"notice\":\"Emitted when data at a key is changed\"}},\"kind\":\"user\",\"methods\":{\"getData(bytes32)\":{\"notice\":\"Gets singular data at a given `dataKey`\"},\"getData(bytes32[])\":{\"notice\":\"Gets array of data at multiple given keys\"},\"setData(bytes32,bytes)\":{\"notice\":\"Sets singular data at a given `dataKey`\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\":\"IERC725Y\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\":{\"keccak256\":\"0x4144879c1923deaac59a07abd5dabb9d8c50b5b4522e3fb9158e0e63a3ce696b\",\"license\":\"CC0-1.0\",\"urls\":[\"bzz-raw://810f61f5ed8fb2ac8270751188382c0f66b268dcf5e877e2d320b6dc95c44528\",\"dweb:/ipfs/QmR7GYVw79YypsAWg5jfNzNMCE3NJqersoqCkyux3MR8oa\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "// SPDX-License-Identifier: CC0-1.0\npragma solidity ^0.8.0;\n\n// interfaces\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n/**\n * @title The interface for ERC725Y General data key/value store\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time\n * It is intended to standardise certain data key/value pairs to allow automated read and writes\n * from/to the contract storage\n */\ninterface IERC725Y is IERC165 {\n    /**\n     * @notice Emitted when data at a key is changed\n     * @param dataKey The key which value is set\n     */\n    event DataChanged(bytes32 indexed dataKey);\n\n    /**\n     * @notice Gets singular data at a given `dataKey`\n     * @param dataKey The key which value to retrieve\n     * @return dataValue The data stored at the key\n     */\n    function getData(bytes32 dataKey) external view returns (bytes memory dataValue);\n\n    /**\n     * @notice Gets array of data at multiple given keys\n     * @param dataKeys The array of keys which values to retrieve\n     * @return dataValues The array of data stored at multiple keys\n     */\n    function getData(bytes32[] memory dataKeys) external view returns (bytes[] memory dataValues);\n\n    /**\n     * @notice Sets singular data at a given `dataKey`\n     * @param dataKey The key which value to retrieve\n     * @param dataValue The value to set\n     * SHOULD only be callable by the owner of the contract set via ERC173\n     *\n     * Emits a {DataChanged} event.\n     */\n    function setData(bytes32 dataKey, bytes memory dataValue) external;\n\n    /**\n     * @param dataKeys The array of keys which values to set\n     * @param dataValues The array of values to set\n     * @dev Sets array of data at multiple given `dataKeys`\n     * SHOULD only be callable by the owner of the contract set via ERC173\n     *\n     * Emits a {DataChanged} event.\n     */\n    function setData(bytes32[] memory dataKeys, bytes[] memory dataValues) external;\n}\n",
  "sourcePath": "@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol",
  "ast": {
    "absolutePath": "@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol",
    "exportedSymbols": {
      "IERC165": [
        3930
      ],
      "IERC725Y": [
        895
      ]
    },
    "id": 896,
    "license": "CC0-1.0",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 848,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "36:23:6"
      },
      {
        "absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
        "file": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
        "id": 850,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 896,
        "sourceUnit": 3931,
        "src": "75:80:6",
        "symbolAliases": [
          {
            "foreign": {
              "id": 849,
              "name": "IERC165",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 3930,
              "src": "83:7:6",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 852,
              "name": "IERC165",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 3930,
              "src": "486:7:6"
            },
            "id": 853,
            "nodeType": "InheritanceSpecifier",
            "src": "486:7:6"
          }
        ],
        "canonicalName": "IERC725Y",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 851,
          "nodeType": "StructuredDocumentation",
          "src": "157:306:6",
          "text": " @title The interface for ERC725Y General data key/value store\n @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time\n It is intended to standardise certain data key/value pairs to allow automated read and writes\n from/to the contract storage"
        },
        "fullyImplemented": false,
        "id": 895,
        "linearizedBaseContracts": [
          895,
          3930
        ],
        "name": "IERC725Y",
        "nameLocation": "474:8:6",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "anonymous": false,
            "documentation": {
              "id": 854,
              "nodeType": "StructuredDocumentation",
              "src": "500:113:6",
              "text": " @notice Emitted when data at a key is changed\n @param dataKey The key which value is set"
            },
            "eventSelector": "cdf4e344c0d23d4cdd0474039d176c55b19d531070dbe17856bfb993a5b5720b",
            "id": 858,
            "name": "DataChanged",
            "nameLocation": "624:11:6",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 857,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 856,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "dataKey",
                  "nameLocation": "652:7:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 858,
                  "src": "636:23:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 855,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "636:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "635:25:6"
            },
            "src": "618:43:6"
          },
          {
            "documentation": {
              "id": 859,
              "nodeType": "StructuredDocumentation",
              "src": "667:172:6",
              "text": " @notice Gets singular data at a given `dataKey`\n @param dataKey The key which value to retrieve\n @return dataValue The data stored at the key"
            },
            "functionSelector": "54f6127f",
            "id": 866,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getData",
            "nameLocation": "853:7:6",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 862,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 861,
                  "mutability": "mutable",
                  "name": "dataKey",
                  "nameLocation": "869:7:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 866,
                  "src": "861:15:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 860,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "861:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "860:17:6"
            },
            "returnParameters": {
              "id": 865,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 864,
                  "mutability": "mutable",
                  "name": "dataValue",
                  "nameLocation": "914:9:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 866,
                  "src": "901:22:6",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 863,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "901:5:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "900:24:6"
            },
            "scope": 895,
            "src": "844:81:6",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 867,
              "nodeType": "StructuredDocumentation",
              "src": "931:202:6",
              "text": " @notice Gets array of data at multiple given keys\n @param dataKeys The array of keys which values to retrieve\n @return dataValues The array of data stored at multiple keys"
            },
            "functionSelector": "4e3e6e9c",
            "id": 876,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getData",
            "nameLocation": "1147:7:6",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 871,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 870,
                  "mutability": "mutable",
                  "name": "dataKeys",
                  "nameLocation": "1172:8:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 876,
                  "src": "1155:25:6",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                    "typeString": "bytes32[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 868,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "1155:7:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 869,
                    "nodeType": "ArrayTypeName",
                    "src": "1155:9:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                      "typeString": "bytes32[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1154:27:6"
            },
            "returnParameters": {
              "id": 875,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 874,
                  "mutability": "mutable",
                  "name": "dataValues",
                  "nameLocation": "1220:10:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 876,
                  "src": "1205:25:6",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes_memory_ptr_$dyn_memory_ptr",
                    "typeString": "bytes[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 872,
                      "name": "bytes",
                      "nodeType": "ElementaryTypeName",
                      "src": "1205:5:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_storage_ptr",
                        "typeString": "bytes"
                      }
                    },
                    "id": 873,
                    "nodeType": "ArrayTypeName",
                    "src": "1205:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes_storage_$dyn_storage_ptr",
                      "typeString": "bytes[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1204:27:6"
            },
            "scope": 895,
            "src": "1138:94:6",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 877,
              "nodeType": "StructuredDocumentation",
              "src": "1238:279:6",
              "text": " @notice Sets singular data at a given `dataKey`\n @param dataKey The key which value to retrieve\n @param dataValue The value to set\n SHOULD only be callable by the owner of the contract set via ERC173\n Emits a {DataChanged} event."
            },
            "functionSelector": "7f23690c",
            "id": 884,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setData",
            "nameLocation": "1531:7:6",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 882,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 879,
                  "mutability": "mutable",
                  "name": "dataKey",
                  "nameLocation": "1547:7:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 884,
                  "src": "1539:15:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 878,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1539:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 881,
                  "mutability": "mutable",
                  "name": "dataValue",
                  "nameLocation": "1569:9:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 884,
                  "src": "1556:22:6",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 880,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "1556:5:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1538:41:6"
            },
            "returnParameters": {
              "id": 883,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1588:0:6"
            },
            "scope": 895,
            "src": "1522:67:6",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 885,
              "nodeType": "StructuredDocumentation",
              "src": "1595:302:6",
              "text": " @param dataKeys The array of keys which values to set\n @param dataValues The array of values to set\n @dev Sets array of data at multiple given `dataKeys`\n SHOULD only be callable by the owner of the contract set via ERC173\n Emits a {DataChanged} event."
            },
            "functionSelector": "14a6e293",
            "id": 894,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setData",
            "nameLocation": "1911:7:6",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 892,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 888,
                  "mutability": "mutable",
                  "name": "dataKeys",
                  "nameLocation": "1936:8:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 894,
                  "src": "1919:25:6",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                    "typeString": "bytes32[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 886,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "1919:7:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 887,
                    "nodeType": "ArrayTypeName",
                    "src": "1919:9:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                      "typeString": "bytes32[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 891,
                  "mutability": "mutable",
                  "name": "dataValues",
                  "nameLocation": "1961:10:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 894,
                  "src": "1946:25:6",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes_memory_ptr_$dyn_memory_ptr",
                    "typeString": "bytes[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 889,
                      "name": "bytes",
                      "nodeType": "ElementaryTypeName",
                      "src": "1946:5:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_storage_ptr",
                        "typeString": "bytes"
                      }
                    },
                    "id": 890,
                    "nodeType": "ArrayTypeName",
                    "src": "1946:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes_storage_$dyn_storage_ptr",
                      "typeString": "bytes[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1918:54:6"
            },
            "returnParameters": {
              "id": 893,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1981:0:6"
            },
            "scope": 895,
            "src": "1902:80:6",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 896,
        "src": "464:1520:6",
        "usedErrors": []
      }
    ],
    "src": "36:1949:6"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.15+commit.e14f2714.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.8",
  "updatedAt": "2022-07-21T08:10:14.586Z",
  "devdoc": {
    "details": "ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage",
    "events": {
      "DataChanged(bytes32)": {
        "params": {
          "dataKey": "The key which value is set"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "getData(bytes32)": {
        "params": {
          "dataKey": "The key which value to retrieve"
        },
        "returns": {
          "dataValue": "The data stored at the key"
        }
      },
      "getData(bytes32[])": {
        "params": {
          "dataKeys": "The array of keys which values to retrieve"
        },
        "returns": {
          "dataValues": "The array of data stored at multiple keys"
        }
      },
      "setData(bytes32,bytes)": {
        "params": {
          "dataKey": "The key which value to retrieve",
          "dataValue": "The value to set SHOULD only be callable by the owner of the contract set via ERC173 Emits a {DataChanged} event."
        }
      },
      "setData(bytes32[],bytes[])": {
        "details": "Sets array of data at multiple given `dataKeys` SHOULD only be callable by the owner of the contract set via ERC173 Emits a {DataChanged} event.",
        "params": {
          "dataKeys": "The array of keys which values to set",
          "dataValues": "The array of values to set"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      }
    },
    "title": "The interface for ERC725Y General data key/value store",
    "version": 1
  },
  "userdoc": {
    "events": {
      "DataChanged(bytes32)": {
        "notice": "Emitted when data at a key is changed"
      }
    },
    "kind": "user",
    "methods": {
      "getData(bytes32)": {
        "notice": "Gets singular data at a given `dataKey`"
      },
      "getData(bytes32[])": {
        "notice": "Gets array of data at multiple given keys"
      },
      "setData(bytes32,bytes)": {
        "notice": "Sets singular data at a given `dataKey`"
      }
    },
    "version": 1
  }
}
// SPDX-License-Identifier: CC0-1.0
pragma solidity ^0.8.0;

// --- ERC165 interface ids
bytes4 constant _INTERFACEID_LSP6 = 0xc403d48f;

// --- ERC725Y Keys

// PERMISSIONS KEYS

// keccak256('AddressPermissions[]')
bytes32 constant _LSP6KEY_ADDRESSPERMISSIONS_ARRAY = 0xdf30dba06db6a30e65354d9a64c609861f089545ca58c6b4dbe31a5f338cb0e3;

// AddressPermissions[index]
bytes16 constant _LSP6KEY_ADDRESSPERMISSIONS_ARRAY_PREFIX = 0xdf30dba06db6a30e65354d9a64c60986;

// AddressPermissions:...
bytes6 constant _LSP6KEY_ADDRESSPERMISSIONS_PREFIX = 0x4b80742de2bf;

// bytes6(keccak256('AddressPermissions')) + bytes4(keccak256('Permissions')) + bytes2(0)
bytes12 constant _LSP6KEY_ADDRESSPERMISSIONS_PERMISSIONS_PREFIX = 0x4b80742de2bf82acb3630000; // AddressPermissions:Permissions:<address> --> bytes32

// bytes6(keccak256('AddressPermissions')) + bytes4(keccak256('AllowedAddresses')) + bytes2(0)
bytes12 constant _LSP6KEY_ADDRESSPERMISSIONS_ALLOWEDADDRESSES_PREFIX = 0x4b80742de2bfc6dd6b3c0000; // AddressPermissions:AllowedAddresses:<address> --> address[]

// bytes6(keccak256('AddressPermissions')) + bytes4(keccak256('AllowedFunctions')) + bytes2(0)
bytes12 constant _LSP6KEY_ADDRESSPERMISSIONS_ALLOWEDFUNCTIONS_PREFIX = 0x4b80742de2bf8efea1e80000; // AddressPermissions:AllowedFunctions:<address> --> bytes4[]

// bytes6(keccak256('AddressPermissions')) + bytes4(keccak256('AllowedStandards')) + bytes2(0)
bytes12 constant _LSP6KEY_ADDRESSPERMISSIONS_ALLOWEDSTANDARDS_PREFIX = 0x4b80742de2bf3efa94a30000; // AddressPermissions:AllowedStandards:<address> --> bytes4[]

// bytes6(keccak256('AddressPermissions')) + bytes4(keccak256('AllowedERC725YKeys')) + bytes2(0)
bytes12 constant _LSP6KEY_ADDRESSPERMISSIONS_ALLOWEDERC725YKEYS_PREFIX = 0x4b80742de2bf90b8b4850000; // AddressPermissions:AllowedERC725YKeys:<address> --> bytes32[]

// DEFAULT PERMISSIONS VALUES
bytes32 constant _PERMISSION_CHANGEOWNER        = 0x0000000000000000000000000000000000000000000000000000000000000001;
bytes32 constant _PERMISSION_CHANGEPERMISSIONS  = 0x0000000000000000000000000000000000000000000000000000000000000002;
bytes32 constant _PERMISSION_ADDPERMISSIONS     = 0x0000000000000000000000000000000000000000000000000000000000000004;
bytes32 constant _PERMISSION_SETDATA            = 0x0000000000000000000000000000000000000000000000000000000000000008;
bytes32 constant _PERMISSION_CALL               = 0x0000000000000000000000000000000000000000000000000000000000000010;
bytes32 constant _PERMISSION_STATICCALL         = 0x0000000000000000000000000000000000000000000000000000000000000020;
bytes32 constant _PERMISSION_DELEGATECALL       = 0x0000000000000000000000000000000000000000000000000000000000000040;
bytes32 constant _PERMISSION_DEPLOY             = 0x0000000000000000000000000000000000000000000000000000000000000080;
bytes32 constant _PERMISSION_TRANSFERVALUE      = 0x0000000000000000000000000000000000000000000000000000000000000100;
bytes32 constant _PERMISSION_SIGN               = 0x0000000000000000000000000000000000000000000000000000000000000200;

// SUPER PERMISSIONS
// -----
// allow to not check for AddressPermissions:AllowedERC725YKeys:...
bytes32 constant _PERMISSION_SUPER_SETDATA      = 0x0000000000000000000000000000000000000000000000000000000000000400;

// allow to not check for:
//  - AddressPermissions:AllowedAddress:...
//  - AddressPermissions:AllowedStandards:...
//  - AddressPermissions:AllowedFunctions:...
bytes32 constant _PERMISSION_SUPER_TRANSFERVALUE = 0x0000000000000000000000000000000000000000000000000000000000000800;
bytes32 constant _PERMISSION_SUPER_CALL         = 0x0000000000000000000000000000000000000000000000000000000000001000;
bytes32 constant _PERMISSION_SUPER_STATICCALL   = 0x0000000000000000000000000000000000000000000000000000000000002000;
bytes32 constant _PERMISSION_SUPER_DELEGATECALL = 0x0000000000000000000000000000000000000000000000000000000000004000;


/// @dev see IERC725Y interface
///      https://github.com/ERC725Alliance/ERC725/blob/main/implementations/contracts/interfaces/IERC725Y.sol
bytes4 constant setDataSingleSelector = bytes4(keccak256("setData(bytes32,bytes)"));
bytes4 constant setDataMultipleSelector = bytes4(keccak256("setData(bytes32[],bytes[])"));